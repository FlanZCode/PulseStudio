<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/CODE_OF_CONDUCT.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/CODE_OF_CONDUCT.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Code of Conduct&#10;&#10;This project and everyone participating in it is governed by a set of expectations to ensure a welcoming, safe, and productive community for all.&#10;&#10;## Our Pledge&#10;We pledge to make participation in PulseStudio a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.&#10;&#10;## Our Standards&#10;Examples of behavior that contributes to a positive environment include:&#10;- Using welcoming and inclusive language&#10;- Being respectful of differing viewpoints and experiences&#10;- Gracefully accepting constructive criticism&#10;- Focusing on what is best for the community&#10;- Showing empathy towards other community members&#10;&#10;Examples of unacceptable behavior include:&#10;- The use of sexualized language or imagery and unwelcome sexual attention or advances&#10;- Trolling, insulting/derogatory comments, and personal or political attacks&#10;- Public or private harassment&#10;- Publishing others’ private information, such as a physical or electronic address, without explicit permission&#10;- Other conduct which could reasonably be considered inappropriate in a professional setting&#10;&#10;## Scope&#10;This Code of Conduct applies within all project spaces and also applies when an individual is representing the project or its community in public spaces.&#10;&#10;## Enforcement&#10;Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project maintainers at opensource@hoststudio.dev. All complaints will be reviewed and investigated promptly and fairly.&#10;&#10;Project maintainers are obligated to respect the privacy and security of the reporter of any incident.&#10;&#10;## Enforcement Guidelines&#10;Community leaders will follow these guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:&#10;&#10;1. Correction&#10;- Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome.&#10;- Consequence: A private, written warning, with clarity around the nature of the violation and an explanation of why the behavior was inappropriate.&#10;&#10;2. Warning&#10;- Impact: A violation through a single incident or series of actions.&#10;- Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time.&#10;&#10;3. Temporary Ban&#10;- Impact: A serious violation of community standards, including sustained inappropriate behavior.&#10;- Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time.&#10;&#10;4. Permanent Ban&#10;- Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.&#10;- Consequence: A permanent ban from any sort of public interaction within the community.&#10;&#10;## Attribution&#10;This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html&#10;&#10;Community Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.&#10;&#10;For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/CONTRIBUTING.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/CONTRIBUTING.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Contributing to PulseStudio&#10;&#10;Thanks for your interest in contributing! PulseStudio is an open-source Node.js daemon that bridges a central panel (e.g., StackStudio) with remote game servers and services. We welcome bug reports, feature requests, documentation improvements, and code contributions.&#10;&#10;This document explains how to get set up, how to propose changes, and the expectations for contributions.&#10;&#10;## Ways to contribute&#10;- Report bugs and issues&#10;- Propose features and enhancements&#10;- Improve documentation&#10;- Submit code changes (fixes, refactoring, new features)&#10;&#10;Before filing an issue or opening a PR, please check existing issues/PRs to avoid duplicates.&#10;&#10;## Code of Conduct&#10;By participating, you agree to abide by our Code of Conduct (see CODE_OF_CONDUCT.md). Be respectful and considerate.&#10;&#10;## Prerequisites&#10;- Node.js &gt;= 20&#10;- npm&#10;- Linux recommended (other compatible OSes should work)&#10;&#10;## Getting started (development)&#10;1. Fork the repository and clone your fork&#10;2. Install dependencies:&#10;   - npm install&#10;3. Create a .env file from the example and set variables:&#10;   - cp .env.example .env&#10;   - Set REMOTE_WS_URL (e.g., wss://panel.example.com/ws)&#10;   - Set AUTH_TOKEN (a bearer token validated by the panel)&#10;   - Optionally set PORT (defaults to 24847)&#10;4. Start in development mode (node watch):&#10;   - npm run dev&#10;5. In another terminal, you can connect a local WS client to ws://localhost:PORT (default 24847) to exercise the local hub behavior.&#10;&#10;Optional local mock:&#10;- A simple mock panel server lives in tests/tests.js. It is intentionally minimal and may not fully match production behavior. You can run it with:&#10;  - node tests/tests.js&#10;  Then point REMOTE_WS_URL to ws://localhost:8080.&#10;&#10;## Project layout&#10;- src/index.js — program entrypoint&#10;- src/config/env.js — environment variable loading&#10;- src/server/httpServer.js — HTTP server and health endpoint&#10;- src/server/wsServer.js — local WebSocket server and broadcast&#10;- src/services/remoteClient.js — remote panel WebSocket client (auth, ping, reconnect)&#10;- src/services/logManager.js — minimal logging helpers&#10;- docs/ — architecture and protocol notes&#10;- tests/tests.js — simple mock to help local experiments&#10;&#10;## Coding guidelines&#10;- Use modern ESM (import/export). The project uses &quot;type&quot;: &quot;module&quot;.&#10;- Prefer async/await and clear error handling over callbacks.&#10;- Keep dependencies minimal; use standard library when feasible.&#10;- Logging: use src/services/logManager.js; don’t print secrets or tokens.&#10;- Don’t block the event loop; keep operations non-blocking.&#10;- Follow existing conventions and file structure.&#10;&#10;### Linting and formatting&#10;- Run lint: npm run lint&#10;- Auto-fix where possible: npm run lint:fix&#10;- Ensure your changes pass linting before opening a PR.&#10;&#10;### Commit messages&#10;We encourage the Conventional Commits style (not strictly required):&#10;- feat: add new feature&#10;- fix: resolve a bug&#10;- docs: update documentation&#10;- refactor: code change that neither fixes a bug nor adds a feature&#10;- perf: improve performance&#10;- test: add or adjust tests&#10;- chore: tooling, CI, dependencies&#10;&#10;Include scope when helpful (e.g., feat(ws): broadcast panel messages).&#10;&#10;### Tests&#10;- The repository currently includes a simple mock server but not a full test suite. If you add features with observable behavior, consider adding a small test (or mock-driven check) to the tests/ folder.&#10;&#10;## Pull Request (PR) process&#10;1. Create a feature branch from main (e.g., feature/ws-backoff)&#10;2. Ensure your changes build and pass linting locally&#10;3. Update documentation (README, docs/*.md) when behavior or configuration changes&#10;4. Add notes to the PR description: problem statement, solution, alternatives considered, and any risks&#10;5. Reference related issues with &quot;Fixes #123&quot; or &quot;Closes #123&quot; when applicable&#10;6. Be ready to iterate after review feedback&#10;&#10;## Security&#10;- Never include secrets (tokens, private URLs) in issues, PRs, or logs&#10;- Report vulnerabilities privately per SECURITY.md&#10;- Avoid introducing features that require elevated privileges without discussion&#10;&#10;## Release and versioning&#10;- Until 1.0, breaking changes may occur in minor releases (SemVer pre-1.0 rules)&#10;- Changelogs are maintained via PR descriptions and release notes&#10;&#10;## Communication&#10;- For security-sensitive topics, see SECURITY.md&#10;- For general questions or proposals, open a GitHub Discussion or Issue&#10;&#10;Thanks again for helping make PulseStudio better!" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# PulseStudio&#10;&#10;A lightweight Node.js daemon that bridges your central panel (e.g., StackStudio or a future proprietary panel) with remote game servers and services. It exposes a local WebSocket for tools on the host and maintains a secure, authenticated WebSocket to the central panel.&#10;&#10;- Language/runtime: Node.js (&gt;= 20)&#10;- License: MIT&#10;- Repository: https://github.com/HostStudio/PulseStudio&#10;&#10;## Features&#10;- Secure outbound WebSocket connection to the panel (Authorization: Bearer &lt;token&gt;).&#10;- Local WebSocket hub that broadcasts messages from the panel to all local clients, and forwards local client messages to the panel.&#10;- Health-check HTTP endpoint (/), ready for container or load balancer checks.&#10;- Automatic reconnect with exponential backoff (up to 30s) and heartbeat/ping management for both local and remote sockets.&#10;- Minimal footprint; single process with graceful shutdown on SIGINT/SIGTERM.&#10;&#10;## Architecture (at a glance)&#10;PulseStudio sits on the target machine, opening:&#10;- an HTTP server (also used to upgrade local WebSockets), and&#10;- a persistent, authenticated WebSocket to the remote panel.&#10;&#10;Message flow:&#10;- Local WS clients —&gt; PulseStudio —&gt; Remote panel WS&#10;- Remote panel WS —&gt; PulseStudio —&gt; Broadcast to all local WS clients&#10;&#10;See docs/architecture.md for a deeper dive.&#10;&#10;## Requirements&#10;- Node.js &gt;= 20&#10;- Linux recommended (works on other compatible OSes)&#10;&#10;## Quick start&#10;1) Install&#10;- Clone the repository and install dependencies:&#10;  - npm install&#10;&#10;2) Configure environment&#10;- Copy .env.example to .env and set required variables:&#10;  - PORT (optional, default: 24847)&#10;  - REMOTE_WS_URL (required, e.g., wss://panel.example.com/ws)&#10;  - AUTH_TOKEN (required, Bearer token the panel will validate)&#10;&#10;3) Run&#10;- Development (auto-reload): npm run dev&#10;- Production: npm start&#10;&#10;4) Connect a local client&#10;- Local tools can connect to ws://localhost:PORT (default 24847). All messages are forwarded to the remote panel and replies are broadcast back to all local clients.&#10;&#10;## Configuration&#10;Environment variables (see src/config/env.js):&#10;- PORT: number, defaults to 24847&#10;- REMOTE_WS_URL: string, required. Panel WebSocket URL, typically wss://…&#10;- AUTH_TOKEN: string, required. Bearer token presented to the panel&#10;- USER_AGENT: fixed to &quot;PulseStudio-WS-Bridge/1.0&quot; (not configurable at runtime)&#10;&#10;Example .env:&#10;```&#10;PORT=24847&#10;REMOTE_WS_URL=wss://panel.example.com/ws&#10;AUTH_TOKEN=REPLACE_ME&#10;```&#10;&#10;## HTTP endpoints&#10;- GET / — returns { ok: true, message: &quot;OK&quot; } as JSON (useful for health checks)&#10;- Other paths — a simple text banner&#10;&#10;## WebSocket behavior&#10;Local WS (ws://&lt;host&gt;:&lt;PORT&gt;):&#10;- Any message received from a local client is forwarded to the remote panel socket.&#10;- Any message received from the panel is broadcast to all connected local clients.&#10;&#10;Health/heartbeat:&#10;- Local: per-connection ping/pong to detect dead clients and terminate them.&#10;- Remote: periodic ping with a 15s interval; heartbeat checks every 30s; exponential reconnect backoff up to 30s on error/close.&#10;&#10;Authentication:&#10;- Remote panel: Authorization: Bearer &lt;AUTH_TOKEN&gt; header set during connect.&#10;- Local WS: no built-in auth; protect the port with a firewall or bind to a private interface.&#10;&#10;## Production notes&#10;- Run under a dedicated OS user with least privileges.&#10;- Restrict access to the local WS port (e.g., firewall rules, bind to 127.0.0.1 and use a local consumer).&#10;- Prefer a wss:// REMOTE_WS_URL with a valid certificate.&#10;- Use a systemd service (Linux) to ensure automatic restart; example:&#10;&#10;```&#10;[Unit]&#10;Description=PulseStudio Daemon&#10;After=network-online.target&#10;&#10;[Service]&#10;Type=simple&#10;Environment=NODE_ENV=production&#10;WorkingDirectory=/opt/pulsestudio&#10;ExecStart=/usr/bin/node src/index.js&#10;Restart=always&#10;User=pulsestudio&#10;Group=pulsestudio&#10;EnvironmentFile=/opt/pulsestudio/.env&#10;&#10;[Install]&#10;WantedBy=multi-user.target&#10;```&#10;&#10;## Development&#10;- Lint: npm run lint / npm run lint:fix&#10;- Dev mode: npm run dev (Node watch)&#10;&#10;Optional integration test:&#10;- A simple mock panel server lives in tests/tests.js. Start it (node tests/tests.js) and point REMOTE_WS_URL to ws://localhost:8080, then connect a local WS client to your PulseStudio PORT.&#10;&#10;## Troubleshooting&#10;- REMOTE_WS_URL must be set; otherwise the process exits with a critical error.&#10;- AUTH_TOKEN must be set; otherwise the process exits with a critical error.&#10;- If the remote is unreachable, PulseStudio will keep reconnecting with exponential backoff (max 30s). Check firewall/DNS/SSL.&#10;&#10;## Security&#10;See SECURITY.md for our policy and hardening tips.&#10;&#10;## License&#10;MIT (see LICENSE)." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SECURITY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SECURITY.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Security Policy&#10;&#10;PulseStudio is a lightweight Node.js daemon that bridges a central panel (e.g., StackStudio or a future proprietary panel) with remote game servers and services. This document describes how to report vulnerabilities and how to deploy PulseStudio securely.&#10;&#10;## Supported versions&#10;We actively support and patch the latest released minor version. Security fixes may be backported at maintainers’ discretion.&#10;- Main branch: supported (pre-release)&#10;- Latest tagged release: supported&#10;&#10;## Reporting a vulnerability&#10;- Do not open a public GitHub issue for security vulnerabilities.&#10;- Email a report to: opensource@hoststudio.dev&#10;- Include a clear description, reproduction steps, affected versions/commit, environment details, and impact assessment.&#10;- If possible, include a minimal proof-of-concept. Avoid sending real secrets.&#10;- We will acknowledge receipt within 3 business days and provide status updates as we triage and fix the issue.&#10;&#10;Coordinated disclosure: We prefer responsible disclosure. We will work with you on timelines for public advisories and credits.&#10;&#10;## Threat model and scope&#10;- Remote WebSocket: PulseStudio connects outbound to the central panel with an Authorization: Bearer &lt;token&gt; header. Treat the panel as a trusted peer; compromise of the panel can impact all connected agents.&#10;- Local WebSocket: PulseStudio exposes a local WS server on PORT (default 24847). There is no built-in authentication for local clients. You must restrict access (see Hardening) to avoid unauthorized local control.&#10;- HTTP: A minimal health endpoint (/) returns JSON and is not intended to carry sensitive data.&#10;&#10;Out of scope: vulnerabilities solely caused by misconfiguration of the host OS, unrelated third-party software on the same host, or panel-side issues outside this repository.&#10;&#10;## Hardening guide (recommended)&#10;- Network exposure:&#10;  - Bind the daemon to a private interface or localhost if possible.&#10;  - Restrict the local WS port with firewall rules (e.g., only allow 127.0.0.1 or your management network).&#10;  - Prefer a wss:// REMOTE_WS_URL with a valid TLS certificate.&#10;- Least privilege:&#10;  - Run under a dedicated non-root OS user and group (e.g., pulsestudio).&#10;  - Limit file system permissions to only what is necessary.&#10;- Process supervision:&#10;  - Use systemd or an equivalent supervisor. Consider restrictive options (examples):&#10;    - NoNewPrivileges=true&#10;    - PrivateTmp=true&#10;    - ProtectSystem=strict&#10;    - ProtectHome=true&#10;    - ReadWritePaths=/opt/pulsestudio /var/log/pulsestudio&#10;    - CapabilityBoundingSet=&#10;    - RestrictAddressFamilies=AF_INET AF_INET6&#10;- Secrets and tokens:&#10;  - Store AUTH_TOKEN outside of source control (e.g., .env, systemd EnvironmentFile, or a secrets manager).&#10;  - Rotate tokens regularly; revoke on compromise.&#10;  - Avoid printing tokens in logs; the code does not intentionally log secrets.&#10;- Dependencies and runtime:&#10;  - Use Node.js &gt;= 20 and keep it up to date with security releases.&#10;  - Regularly update dependencies (npm audit, changelogs) and test before rollout.&#10;- Logging/telemetry:&#10;  - Ensure logs do not include sensitive payloads sent over WS. Redact if needed.&#10;&#10;## Configuration checklist&#10;- REMOTE_WS_URL is set to your panel WS endpoint (prefer wss://)&#10;- AUTH_TOKEN is set to a valid bearer token and stored securely&#10;- PORT set only if you need a non-default port; firewall in place&#10;- Hostname/DNS and time are correct for TLS validation&#10;&#10;## Incident response&#10;- If you suspect a compromise, immediately revoke AUTH_TOKEN, stop the daemon, rotate any related credentials, and audit host/network logs.&#10;- Contact opensource@hoststudio.dev with details and steps already taken.&#10;&#10;## Acknowledgements&#10;We appreciate responsible disclosures from the community. When appropriate, we credit reporters in release notes or advisories." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>